കൈകാര്യം ചെയ്യുന്നതിൽ പിശക്
=============

പൊതു അവലോകനം
----------------
ഹൈപ്പർലെഡ്ജർ ഫാബ്രിക് കോഡ് വെണ്ടർ ചെയ്ത പാക്കേജ് ഉപയോഗിക്കണം
Go നൽകിയ സ്റ്റാൻഡേർഡ് പിശക് തരത്തിന് പകരമായി ** github.com / pkg / errors **.
ഈ പാക്കേജ് എളുപ്പത്തിൽ സൃഷ്ടിക്കുന്നതിനും പിശക് ഉപയോഗിച്ച് സ്റ്റാക്ക് ട്രെയ്സുകൾ പ്രദർശിപ്പിക്കുന്നതിനും അനുവദിക്കുന്നു
സന്ദേശങ്ങൾ.

ഉപയോഗ നിർദ്ദേശങ്ങൾ
------------------

** എല്ലാ കോളുകൾക്കും പകരം github.com / pkg / errors** ഉപയോഗിക്കണം
`` fmt.Errorf () `` അല്ലെങ്കിൽ `` പിശകുകൾ.പുതിയ () ``. ഈ പാക്കേജ് ഉപയോഗിക്കുന്നത്  സൃഷ്ടിക്കും
കോൾ സ്റ്റാക്ക് പിശക് സന്ദേശവുമായി കൂട്ടിച്ചേർക്കപ്പെടും.

ഈ പാക്കേജ് ഉപയോഗിക്കുന്നത് ലളിതമാണ് മാത്രമല്ല നിങ്ങളുടെ കോഡിലേക്ക് എളുപ്പത്തിൽ മാറ്റങ്ങൾ വരുത്തുകയും ചെയ്യും.

ആദ്യം, നിങ്ങൾ ** github.com / pkg / errors ** ഇറക്കുമതി ചെയ്യേണ്ടതുണ്ട്.

അടുത്തതായി, ഒരു പിശക് ഉപയോഗിക്കുന്നതിന് നിങ്ങളുടെ കോഡ് സൃഷ്ടിച്ച എല്ലാ പിശകുകളും അപ്‌ഡേറ്റ് ചെയ്യുക
സൃഷ്ടിക്കൽ പ്രവർത്തനങ്ങൾ (errors.New(), errors.Errorf(), errors.WithMessage(),
errors.Wrap(), errors.Wrapf().

.. കുറിപ്പ് :: പൂർണ്ണമായ ഡോക്യുമെന്റേഷനായി https://godoc.org/github.com/pkg/errors കാണുക
ലഭ്യമായ പിശക് സൃഷ്ടിക്കൽ ഫംഗ്ഷന്റെ. കൂടാതെ, പൊതു മാർ‌ഗ്ഗനിർ‌ദ്ദേശങ്ങൾ‌ പരിശോധിക്കുക
 ഫാബ്രിക്കിനായി പാക്കേജ് ഉപയോഗിക്കുന്നതിനുള്ള കൂടുതൽ വ്യക്തമായ മാർഗ്ഗനിർദ്ദേശങ്ങൾക്കായി ചുവടെയുള്ള വിഭാഗം
 കോഡ്.

അവസാനമായി, ഏതെങ്കിലും ലോഗർ അല്ലെങ്കിൽ fmt.Printf () കോളുകൾക്കായി ഫോർമാറ്റിംഗ് നിർദ്ദേശം മാറ്റുക
പിശക് സന്ദേശത്തിനൊപ്പം കോൾ സ്റ്റാക്ക് പ്രിന്റുചെയ്യുന്നതിന് ``% s`` മുതൽ ``% + v`` വരെ.

ഹൈപ്പർലെഡ്ജർ ഫാബ്രിക്കിൽ പിശക് കൈകാര്യം ചെയ്യുന്നതിനുള്ള പൊതു മാർഗ്ഗനിർദ്ദേശങ്ങൾ
-------------------------------------------------- ---------

- നിങ്ങൾ ഒരു ഉപയോക്തൃ അഭ്യർത്ഥനയ്ക്ക് സേവനം നൽകുകയാണെങ്കിൽ, നിങ്ങൾ പിശക് ലോഗ് ചെയ്ത് തിരികെ നൽകണം.
- ഒരു പിശക് ഒരു ലൈബ്രറി അല്ലെങ്കിൽ വെണ്ടർ പോലുള്ള ഒരു ബാഹ്യ ഉറവിടത്തിൽ നിന്നാണെങ്കിൽ
errors.Wrap() ഉപയോഗിച്ച് പിശക് പൊതിയുക. ഇത് പിശകുകളുടെ  call stack രൂപീകരിക്കുന്നതിന് സഹായകമാകുന്നു 
 - മറ്റൊരു ഫാബ്രിക് ഫംഗ്ഷനിൽ നിന്ന് പിശക് വന്നാൽ,അതിന്റെ കൂടുതൽ വിവരങ്ങൾ ചേർക്കാൻ നിങ്ങൾക്ക് താല്പര്യം ഉണ്ടെങ്കിൽ call stack മാറ്റംവരാത്തവിധത്തിൽ  , errors.WithMessage() ഉപയോഗിച്ച് കൂട്ടിച്ചേർക്കാവുന്നതാണ് .
- മറ്റ് പാക്കേജുകളിലേക്ക് പ്രചരിപ്പിക്കാൻ ഒരു പരിഭ്രാന്തി അനുവദിക്കരുത്.

ഉദാഹരണ പ്രോഗ്രാം
---------------

ഇനിപ്പറയുന്ന ഉദാഹരണ പ്രോഗ്രാം ഉപയോഗിക്കുന്നതിന്റെ വ്യക്തമായ പ്രകടനം നൽകുന്നു
പാക്കേജ്:

.. code:: go

  package main

  import (
    "fmt"

    "github.com/pkg/errors"
  )

  func wrapWithStack() error {
    err := createError()
    // do this when error comes from external source (go lib or vendor)
    return errors.Wrap(err, "wrapping an error with stack")
  }
  func wrapWithoutStack() error {
    err := createError()
    // do this when error comes from internal Fabric since it already has stack trace
    return errors.WithMessage(err, "wrapping an error without stack")
  }
  func createError() error {
    return errors.New("original error")
  }

  func main() {
    err := createError()
    fmt.Printf("print error without stack: %s\n\n", err)
    fmt.Printf("print error with stack: %+v\n\n", err)
    err = wrapWithoutStack()
    fmt.Printf("%+v\n\n", err)
    err = wrapWithStack()
    fmt.Printf("%+v\n\n", err)
  }
.. ക്രിയേറ്റീവ് കോമൺസ് ആട്രിബ്യൂഷൻ 4.0 അന്താരാഷ്ട്ര ലൈസൻസിന് കീഴിൽ ലൈസൻസ് നേടി
 https://creativecommons.org/licenses/by/4.0/
